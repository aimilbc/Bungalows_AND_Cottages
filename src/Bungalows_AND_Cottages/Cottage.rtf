{\rtf1\ansi\ansicpg1252\cocoartf2509
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 package Bungalows_AND_Cottages;\
\
import java.text.DecimalFormat;\
import java.text.ParseException;\
import java.text.SimpleDateFormat;\
import java.util.Date;\
import java.util.Scanner;\
/**\
 * class Cottage extends Booking\
 * @author Aimi Ross\
 * @version 1.0.0\
 * @since 10/28/2019\
 * **/\
public class Cottage extends Booking \{\
	double optionPrice = 5;\
	double typePrice;\
	int optionNights;\
	\
	/**\
	 * default constructor\
	 */\
	public Cottage() \{\}\
	\
	/**\
	  * constructor Cottage\
	  * @param n: name\
	  * @param c: amount of guest \
	  * @param from: check-in\
	  * @param nyt: nights counts\
	  * @param bungType: Bungalow's name\
	  * @param addss: address\
	  * @param phn: phone\
	  * @param e: email\
	  * @param cName: name of credit card\
	  * @param cNum: number of credit card\
	  * @param eDate: Expiration date of credit card\
	  * @param sCode: Security code of credit card\
	  * @param i: confirmation number\
	  * @param typeP: Price of picked type\
	  * @param optNyts: days for the option\
	 */\
	public Cottage(String n, String c, String from, String to, int nights, String pickedCott,String addss, String phn, String e, String cName, String cNum, String eDate, String sCode, int i, double typeP,  int optNyts) \{\
		super(n,c,from,to,nights,pickedCott, addss,phn,e,cName,cNum,eDate,sCode, i);\
		this.typePrice = typeP;\
		this.optionNights = optNyts;\
	\}\
	\
	/**\
	 * booking info to string\
	 */\
	public String toString() \{\
		DecimalFormat depo = new DecimalFormat();\
		depo.setMinimumFractionDigits(2);\
		\
		return "\\nConfirmation Number: " + confirmationNumber + "\\nType:\\t\\t" + type + "\\nFrom:\\t\\t" \
		+ dateFrom + "\\nTo:\\t\\t" + dateTo + "\\nNight(s):\\t"+ nights + " nights\\nName:\\t\\t" + name + "\\nGuest(s):\\t" + count + "\\nCard info:\\t" + cardName + " " \
		+ cardNum + " " + expDate + " " + seruciryCode + "\\nTotal:\\t\\t(" + typePrice + " x " + nights + ") "\
		+ "+ (" + optionPrice +" x " + optionNights +") = $" + depo.format(((typePrice*nights)+(optionPrice*optionNights)))\
		+ "\\nDeposit(20%):\\t$" + depo.format(((typePrice*nights)+(optionPrice*optionNights))*0.50)\
		+ "\\nOwes(80%):\\t$"+ depo.format(((typePrice*nights)+(optionPrice*optionNights))*0.50);\
		\
//		return "\\nConfirmation Number: " + confirmationNumber + "\\nType: " + type + "\\nFrom: " \
//				+ dateFrom + "\\nTo:" + dateTo + "\\nNight counts: "+ nights + " nights\\nName: " + name + "\\nGuest count: " + count + "\\nCard info: " + cardName + " " \
//				+ cardNum + " " + expDate + " " + seruciryCode + "\\nTotal: (" + typePrice + " x " + nights + ") "\
//				+ "+ (" + optionPrice +" x " + optionNights +") = " + depo.format(((typePrice*nights)+(optionPrice*optionNights)))\
//				+ "\\nDeposit(50%): $" + depo.format(((typePrice*nights)+(optionPrice*optionNights))*0.50)\
//				+ "\\nOwes(50%): $"+ depo.format(((typePrice*nights)+(optionPrice*optionNights))*0.50);\
	\}\
	\
	/**\
	 * setter\
	 * @param n: night(s) for the option\
	 */\
	public void setOption(int n) \{\
		this.optionNights = n;\
	\}\
	\
	/**\
	 * displaying the option\
	 */\
	@Override\
	public void displayOption() \{\
		System.out.println("Option: cable TV access for $5 / night");\
		System.out.print("How many nights would you like to have the option?: ");\
	\}\
	\
	/**\
	 * display the deposit status\
	 */\
	public void displayDeposit() \{\
		Scanner in = new Scanner(System.in);\
		System.out.println("Enter canceling date: ");\
		String cancelDate = in.nextLine();\
		DecimalFormat depo = new DecimalFormat();\
		depo.setMinimumFractionDigits(2);\
		\
		SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");\
		\
		try \{\
			Date d1 = sdf.parse(cancelDate);\
			Date d2 = sdf.parse(this.dateFrom);\
			long milliseconds = d1.getTime() - d2.getTime();\
			int days = (int) (milliseconds / (-1000 * 60 * 60 * 24));\
			System.out.println(days);\
			if(days>1) \{\
				System.out.println("Refund: $" +depo.format(((typePrice*nights)+(optionPrice*optionNights))*0.5));\
			\}\
			else\
				System.out.println("No refund within 24h of the reservation date");\
		\} catch (ParseException e) \{\
			// TODO Auto-generated catch block\
			e.printStackTrace();\
		\}\
	\}\
	\
	\
\}\
}